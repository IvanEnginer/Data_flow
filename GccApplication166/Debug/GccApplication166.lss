
GccApplication166.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000198  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000002  00800060  00000198  0000022c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000004  00800062  00800062  0000022e  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  0000022e  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00000260  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000040  00000000  00000000  0000029c  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000695  00000000  00000000  000002dc  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000586  00000000  00000000  00000971  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000002d3  00000000  00000000  00000ef7  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000000ac  00000000  00000000  000011cc  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000392  00000000  00000000  00001278  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000000f1  00000000  00000000  0000160a  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000030  00000000  00000000  000016fb  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  34:	0c 94 63 00 	jmp	0xc6	; 0xc6 <__vector_13>
  38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
  60:	10 e0       	ldi	r17, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	e8 e9       	ldi	r30, 0x98	; 152
  68:	f1 e0       	ldi	r31, 0x01	; 1
  6a:	02 c0       	rjmp	.+4      	; 0x70 <__do_copy_data+0x10>
  6c:	05 90       	lpm	r0, Z+
  6e:	0d 92       	st	X+, r0
  70:	a2 36       	cpi	r26, 0x62	; 98
  72:	b1 07       	cpc	r27, r17
  74:	d9 f7       	brne	.-10     	; 0x6c <__do_copy_data+0xc>

00000076 <__do_clear_bss>:
  76:	20 e0       	ldi	r18, 0x00	; 0
  78:	a2 e6       	ldi	r26, 0x62	; 98
  7a:	b0 e0       	ldi	r27, 0x00	; 0
  7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
  7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
  80:	a6 36       	cpi	r26, 0x66	; 102
  82:	b2 07       	cpc	r27, r18
  84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
  86:	0e 94 c1 00 	call	0x182	; 0x182 <main>
  8a:	0c 94 ca 00 	jmp	0x194	; 0x194 <_exit>

0000008e <__bad_interrupt>:
  8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <_Z10usart_initj>:
#include <util/delay.h>
#include <avr/sfr_defs.h>

void usart_init(unsigned int speed)
{
    UBRRH=(unsigned char)(speed>>8);
  92:	90 bd       	out	0x20, r25	; 32
    UBRRL=(unsigned char) speed;
  94:	89 b9       	out	0x09, r24	; 9
    UCSRA=0x00;
  96:	1b b8       	out	0x0b, r1	; 11
    UCSRB|=(1<<RXEN)|(1<<TXEN);
  98:	8a b1       	in	r24, 0x0a	; 10
  9a:	88 61       	ori	r24, 0x18	; 24
  9c:	8a b9       	out	0x0a, r24	; 10
    UCSRB|=(1<<RXCIE);
  9e:	57 9a       	sbi	0x0a, 7	; 10
    UCSRC=(1<<URSEL)|(1<<UCSZ1)|(1<<UCSZ0);
  a0:	86 e8       	ldi	r24, 0x86	; 134
  a2:	80 bd       	out	0x20, r24	; 32
  a4:	08 95       	ret

000000a6 <_Z13StateInp1Psf1v>:
bool State_SW_ON_PS_1 = false;
bool StatePSF1 = true;

void StateInp1Psf1(void)
{
        if (StatePSF1 & State_SW_ON_PS_1)
  a6:	80 91 62 00 	lds	r24, 0x0062	; 0x800062 <__data_end>
  aa:	88 23       	and	r24, r24
  ac:	41 f0       	breq	.+16     	; 0xbe <_Z13StateInp1Psf1v+0x18>
  ae:	80 91 60 00 	lds	r24, 0x0060	; 0x800060 <StatePSF1>
  b2:	88 23       	and	r24, r24
  b4:	21 f0       	breq	.+8      	; 0xbe <_Z13StateInp1Psf1v+0x18>
        {
            PORTA &= ~(1<<PA0);
  b6:	d8 98       	cbi	0x1b, 0	; 27
            UDR = 'A';
  b8:	81 e4       	ldi	r24, 0x41	; 65
  ba:	8c b9       	out	0x0c, r24	; 12
  bc:	08 95       	ret
        }
        else
        {
            PORTA |= (1<<PA0);
  be:	d8 9a       	sbi	0x1b, 0	; 27
            UDR = 'a';
  c0:	81 e6       	ldi	r24, 0x61	; 97
  c2:	8c b9       	out	0x0c, r24	; 12
  c4:	08 95       	ret

000000c6 <__vector_13>:
        }    
}
 
ISR(USART_RXC_vect)
{
  c6:	1f 92       	push	r1
  c8:	0f 92       	push	r0
  ca:	0f b6       	in	r0, 0x3f	; 63
  cc:	0f 92       	push	r0
  ce:	11 24       	eor	r1, r1
  d0:	2f 93       	push	r18
  d2:	3f 93       	push	r19
  d4:	4f 93       	push	r20
  d6:	5f 93       	push	r21
  d8:	6f 93       	push	r22
  da:	7f 93       	push	r23
  dc:	8f 93       	push	r24
  de:	9f 93       	push	r25
  e0:	af 93       	push	r26
  e2:	bf 93       	push	r27
  e4:	ef 93       	push	r30
  e6:	ff 93       	push	r31
    UDR = Data;
  e8:	80 91 65 00 	lds	r24, 0x0065	; 0x800065 <Data>
  ec:	8c b9       	out	0x0c, r24	; 12
    switch(Data)
  ee:	80 91 65 00 	lds	r24, 0x0065	; 0x800065 <Data>
  f2:	81 34       	cpi	r24, 0x41	; 65
  f4:	19 f0       	breq	.+6      	; 0xfc <__vector_13+0x36>
  f6:	81 36       	cpi	r24, 0x61	; 97
  f8:	39 f0       	breq	.+14     	; 0x108 <__vector_13+0x42>
  fa:	0a c0       	rjmp	.+20     	; 0x110 <__vector_13+0x4a>
    {
        case 'A':
        StatePSF1 = true;
  fc:	81 e0       	ldi	r24, 0x01	; 1
  fe:	80 93 60 00 	sts	0x0060, r24	; 0x800060 <StatePSF1>
        StateInp1Psf1();
 102:	0e 94 53 00 	call	0xa6	; 0xa6 <_Z13StateInp1Psf1v>
        break;
 106:	04 c0       	rjmp	.+8      	; 0x110 <__vector_13+0x4a>
        case 'a':
        StatePSF1 = false;
 108:	10 92 60 00 	sts	0x0060, r1	; 0x800060 <StatePSF1>
        StateInp1Psf1();
 10c:	0e 94 53 00 	call	0xa6	; 0xa6 <_Z13StateInp1Psf1v>
        break;
    }
}
 110:	ff 91       	pop	r31
 112:	ef 91       	pop	r30
 114:	bf 91       	pop	r27
 116:	af 91       	pop	r26
 118:	9f 91       	pop	r25
 11a:	8f 91       	pop	r24
 11c:	7f 91       	pop	r23
 11e:	6f 91       	pop	r22
 120:	5f 91       	pop	r21
 122:	4f 91       	pop	r20
 124:	3f 91       	pop	r19
 126:	2f 91       	pop	r18
 128:	0f 90       	pop	r0
 12a:	0f be       	out	0x3f, r0	; 63
 12c:	0f 90       	pop	r0
 12e:	1f 90       	pop	r1
 130:	18 95       	reti

00000132 <_Z11ChekSwOnPs1v>:

void ChekSwOnPs1(void)
{
    if (bit_is_set(PINC, PINC0))
 132:	98 9b       	sbis	0x13, 0	; 19
 134:	05 c0       	rjmp	.+10     	; 0x140 <_Z11ChekSwOnPs1v+0xe>
    {
        NewStateSwOnPs1 = true;
 136:	81 e0       	ldi	r24, 0x01	; 1
 138:	80 93 63 00 	sts	0x0063, r24	; 0x800063 <NewStateSwOnPs1>
        State_SW_ON_PS_1 = true;
 13c:	80 93 62 00 	sts	0x0062, r24	; 0x800062 <__data_end>
    }
    if (bit_is_clear(PINC, PINC0))
 140:	98 99       	sbic	0x13, 0	; 19
 142:	09 c0       	rjmp	.+18     	; 0x156 <_Z11ChekSwOnPs1v+0x24>
    {
        NewStateSwOnPs1 = false;
 144:	10 92 63 00 	sts	0x0063, r1	; 0x800063 <NewStateSwOnPs1>
        State_SW_ON_PS_1 = false;
 148:	10 92 62 00 	sts	0x0062, r1	; 0x800062 <__data_end>
    }
    if (NewStateSwOnPs1 != StateSwOnPs1)
 14c:	80 91 64 00 	lds	r24, 0x0064	; 0x800064 <StateSwOnPs1>
 150:	18 16       	cp	r1, r24
 152:	71 f4       	brne	.+28     	; 0x170 <_Z11ChekSwOnPs1v+0x3e>
 154:	11 c0       	rjmp	.+34     	; 0x178 <_Z11ChekSwOnPs1v+0x46>
 156:	90 91 63 00 	lds	r25, 0x0063	; 0x800063 <NewStateSwOnPs1>
 15a:	80 91 64 00 	lds	r24, 0x0064	; 0x800064 <StateSwOnPs1>
 15e:	98 17       	cp	r25, r24
 160:	59 f0       	breq	.+22     	; 0x178 <_Z11ChekSwOnPs1v+0x46>
    {
        if (State_SW_ON_PS_1)
 162:	80 91 62 00 	lds	r24, 0x0062	; 0x800062 <__data_end>
 166:	88 23       	and	r24, r24
 168:	19 f0       	breq	.+6      	; 0x170 <_Z11ChekSwOnPs1v+0x3e>
        {
            UDR = 'F';
 16a:	86 e4       	ldi	r24, 0x46	; 70
 16c:	8c b9       	out	0x0c, r24	; 12
 16e:	02 c0       	rjmp	.+4      	; 0x174 <_Z11ChekSwOnPs1v+0x42>
        } 
        else
        {
            UDR = 'f';
 170:	86 e6       	ldi	r24, 0x66	; 102
 172:	8c b9       	out	0x0c, r24	; 12
        }
        StateInp1Psf1();        
 174:	0e 94 53 00 	call	0xa6	; 0xa6 <_Z13StateInp1Psf1v>
    }
    StateSwOnPs1 = NewStateSwOnPs1;
 178:	80 91 63 00 	lds	r24, 0x0063	; 0x800063 <NewStateSwOnPs1>
 17c:	80 93 64 00 	sts	0x0064, r24	; 0x800064 <StateSwOnPs1>
 180:	08 95       	ret

00000182 <main>:
}

int main(void)
{   
    PORTA |=(1<<PA0); 
 182:	d8 9a       	sbi	0x1b, 0	; 27
    usart_init(BAUD);
 184:	80 e8       	ldi	r24, 0x80	; 128
 186:	95 e2       	ldi	r25, 0x25	; 37
 188:	0e 94 49 00 	call	0x92	; 0x92 <_Z10usart_initj>
    sei();
 18c:	78 94       	sei
    while (1) 
    {
        ChekSwOnPs1();
 18e:	0e 94 99 00 	call	0x132	; 0x132 <_Z11ChekSwOnPs1v>
        StateInp1Psf1();        
    }
    StateSwOnPs1 = NewStateSwOnPs1;
}

int main(void)
 192:	fd cf       	rjmp	.-6      	; 0x18e <main+0xc>

00000194 <_exit>:
 194:	f8 94       	cli

00000196 <__stop_program>:
 196:	ff cf       	rjmp	.-2      	; 0x196 <__stop_program>
